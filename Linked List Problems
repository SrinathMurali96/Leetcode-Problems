1. Reverse a LL
2. Detect loop in LL - - Use slow and fast ptr , at a point slow == fast
3. Merge point in LL - use an extra list
4. Swap nodes in Pair - Use first and second ptr , recursion
5. Middle element of LL - Use slow and fast ptr
6. Clone a LL - use extra dict, if present return visited[head] , helper(next), helper(random) 
7. Delete a node in LL (Both from first and last) & Leetcode - 237 
8. Nth node from last (In single traversal)
9. Merge two sorted linked list
10. Palindrome or not - Use first and sec ptr, add elements upto middle in stack, then check equality
11. Flatten a multi level LL
12. Rotate a LL
13. Add two numbers represented by LL
14. Insertion in Sorted LL

15.reverse a grp in size of k
16. Merger k sorted LL

17. Remove Linked List Elements (Specific Value)
