Nth node from last in LL in single traversal

We use two pointer - first_ptr and second_ptr
We move the first_ptr till n position.
Then, we will traverse nodes using both pointers where 
first_ptr from nth node and 
second_ptr from head. 
We traverse till first_ptr is None. So, the second_ptr will land in nth node from last


class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
        
class LL:
    def __init__(self):
        self.head = None
    
    def print_val(self,head):
        while head:
            print(head.data)
            head = head.next
    
    def nth_node(self,head,n):
        first_ptr = second_ptr = head
        i = 0
        while i<n:
            first_ptr = first_ptr.next
            i+=1
        while first_ptr:    
            second_ptr = second_ptr.next
            first_ptr = first_ptr.next
        return second_ptr.data

l = LL()
l.head = Node(1)
second = Node(2)
third = Node(3)
four = Node(4)
five = Node(5)
six = Node(6)

l.head.next = second
second.next = third
third.next = four
four.next = five
five.next = six

l.print_val(l.head)
val = l.nth_node(l.head,5)
print("Nth node from last is ",val)
