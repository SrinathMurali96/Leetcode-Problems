Given list: 1,2,3,4,5,6 , k =4 
Output: 5,6,1,2,3,4

def rotate(head):
      temp = head
      i = 1
      while i<k:
        temp = temp.next
        i+=1
      if temp is None:
          return
      kthnode = temp                #Here, kthnode will be 4 ..so that we can make its next to NULL 
      # Moving upto last node
      while temp.next:
          temp = temp.next
      #set last node's next to head 
      temp.next = head
      #set kth nodes next to None
      kthnode.next = None
      #Finally to send the head , we set kthnode next to head
      head = kthnode.next
      
      return head

2nd Problem:

Given a linked list, rotate the list to the right by k places, where k is non-negative.

Example 1:

Input: 1->2->3->4->5->NULL, k = 2
Output: 4->5->1->2->3->NULL
Explanation:
rotate 1 steps to the right: 5->1->2->3->4->NULL
rotate 2 steps to the right: 4->5->1->2->3->NULL
Example 2:

Input: 0->1->2->NULL, k = 4
Output: 2->0->1->NULL
Explanation:
rotate 1 steps to the right: 2->0->1->NULL
rotate 2 steps to the right: 1->2->0->NULL

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: ListNode, k: int) -> ListNode:
            if head is None or head.next is None or k==0:
                return head
            k-=1
            temp = head 
            while temp.next.next:
                temp = temp.next
                
            final = temp.next 
            temp.next  = None
            final.next = head
            if k:
                return Solution.rotateRight(self,final,k)
            else:
                return final
            
            
